package com.dmdev.hw7;


/**
 Создать иерархию классов, описывающих объекты в космосе.

 Например, планета, спутник, звезда, астероид и т.д. У каждого есть набор методов и характеристик-свойств, как общих (масса), так и присущих только этому типу космического объекта.

 Необходимо учесть следующее:

 В иерархии должно быть минимум 10 классов/интерфейсов

 Обязательно использовать наследование (достаточно 1-2 уровней)

 Использовать полиморфизм и продемонстрировать переопределение методов в иерархии

 Продемонстрировать добавление собственных методов в классах-наследниках (можно с помощью интерфейсов)

 При разработке иерархии держать в уме принцип инкапсуляции, выбирать корректные имена классов, их полей и методов, пользоваться преимуществами полиморфизма

 Отдавайте предпочтение интерфейсам, а не абстрактным классам

 При переопределении методов обязательно использовать аннотацию @Override

 Не создавать лишних классов в системе (полностью дублирующих или не содержащих назначения)

 Каждый класс должен выполнять своё назначение

 Для каждого не абстрактного класса переопределить метод toString() класса для представления информации о классах в строковой форме

 Создать общие методы:
 - Рассчитывающие диаметр космического объекта
 - Сравнивающий массы 2 космических объектов (метод не статический!)

 Создать утилитный класс* SpaceUtils со следующими статическими методами:
 - Принимающий 2 космический объекта и определяющий силу гравитации между ними (можно придумать любую формула на основании расстоянии между объектами и т.д.)
 - Принимающий космический объект и определяющий, является ли он звездой или нет

 Создать класс SpaceRunner, где протестировать написанный функционал

 В этом задании нет одного правильного решения, подойдите к нему творчески.

 Утилитный класс* - это такой класс, который:
 - помечен ключевым словом final, чтобы запретить наследоваться от него
 - имеет private конструктор, чтобы нельзя было создать объект этого класса
 - имеет только статические методы и константы
 */
public class SpaceRunner {
    public static void main(String[] args) {
        Asteroid asteroid = new Asteroid(100, 200, "Астероид1");
        Satellite  satellite1 = new Satellite(400, "Спутник1", 300);
        Satellite  satellite2 = new Satellite(300, "Спутник2", 200);
        Planet planet1 = new Planet(1000, "Планета1", 700, new Satellite[]{satellite1});
        Star star1 = new Star(200, "Звезда1", 200, new Satellite[]{satellite2}, new Planet[]{planet1});
        System.out.println(planet1.getAbsoluteWeight());
        planet1.getAllSatelittes();
        star1.getAllSatelittes();
        System.out.println(SpaceUtils.calcGravity(star1));
        System.out.println(SpaceUtils.isStar(star1));
        System.out.println(SpaceUtils.isStar(planet1));
        System.out.println(star1.isWeightEqual(planet1));
        System.out.println(star1.calcDiameter());
    }
}
